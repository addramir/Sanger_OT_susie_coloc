lll=table(grps)
out=NULL
for (j in 1:i){
clstr=j
dfff=df[names(grps)[grps==clstr],names(grps)[grps==clstr]]
out=c(out,eigen(dfff)$values[1]/sum(eigen(dfff)$values))
}
out_m[i-189,1]=i
out_m[i-189,2]=min(out)
}
eigen(1)
щге_ь
out_m
plot(out_m)
out_m[,2])>=0.95
out_m[,2]>=0.95
min(out_m[,2]>=0.95)
ind=whcih(out_m[,2]>=0.95)
min(ind)
ind=which(out_m[,2]>=0.95)
min(ind)
out_m[min(ind),]
clstr=2
names(grps)[grps==clstr]
dfff=df[names(grps)[grps==clstr],names(grps)[grps==clstr]]
corrplot(dfff,method="square")
grps=cutree(l,k = 619)
lll=table(grps)
clstr=2
names(grps)[grps==clstr]
dfff=df[names(grps)[grps==clstr],names(grps)[grps==clstr]]
corrplot(dfff,method="square")
eigen(dfff)$values[1]/sum(eigen(dfff)$values)
grps=cutree(l,k = 619)
lll=table(grps)
clstr=100
names(grps)[grps==clstr]
dfff=df[names(grps)[grps==clstr],names(grps)[grps==clstr]]
corrplot(dfff,method="square")
eigen(dfff)$values[1]/sum(eigen(dfff)$values)
lll
table(lll>1)
clstr=10
names(grps)[grps==clstr]
dfff=df[names(grps)[grps==clstr],names(grps)[grps==clstr]]
corrplot(dfff,method="square")
clstr=200
names(grps)[grps==clstr]
dfff=df[names(grps)[grps==clstr],names(grps)[grps==clstr]]
corrplot(dfff,method="square")
eigen(dfff)$values[1]/sum(eigen(dfff)$values)
clstr=300
names(grps)[grps==clstr]
dfff=df[names(grps)[grps==clstr],names(grps)[grps==clstr]]
corrplot(dfff,method="square")
eigen(dfff)$values[1]/sum(eigen(dfff)$values)
ll=eigen(dff)
sum(ll$values[1:190])/sum(ll$values)
out_m
plot(out_m[,2])
ind=which(out_m[,2]>=0.95)
out_m[min(ind),]
grps=cutree(l,k = 619)
lll=table(grps)
clstr=300
names(grps)[grps==clstr]
dfff=df[names(grps)[grps==clstr],names(grps)[grps==clstr]]
corrplot(dfff,method="square")
eigen(dfff)$values[1]/sum(eigen(dfff)$values)
table(lll>1)
hist(lll)
hist(lll,n=20)
hist(lll[lll>1],n=20)
table(lll)
plot(cmdscale(dst,k = 2))
library(data.table)
lll
grps
table("FINNGEN_R6_PDSTRICT"%in%names(grps))
table("FINNGEN_R6_PDSTRICT_EXMORE"%in%names(grps))
names(grps)
table("FINNGEN_R6_PD_DEMENTIA_EXMORE"%in%names(grps))
l=names(grps)
table("SAIGE_332"%in%names(grps))
length(l)
table("NEALE2_20107_11"%in%names(grps))
l=c("	FINNGEN_R6_PDSTRICT	",
"	FINNGEN_R6_PDSTRICT_EXMORE	",
"	FINNGEN_R6_PD_DEMENTIA	",
"	FINNGEN_R6_PD_DEMENTIA_EXMORE	",
"	FINNGEN_R6_G6_PARKINSON	",
"	FINNGEN_R6_G6_PARKINSON_EXMORE	",
"	FINNGEN_R6_G6_PARKINSON_INCLAVO	",
"	FINNGEN_R6_G6_PARKSCND	",
"	NEALE2_20002_1262	",
"	NEALE2_20107_11	",
"	NEALE2_20110_11	",
"	NEALE2_20111_11	",
"	GCST90000014	",
"	GCST90000015	",
"	SAIGE_332	")
l
lll=c("FINNGEN_R6_PDSTRICT",
"FINNGEN_R6_PDSTRICT_EXMORE",
"FINNGEN_R6_PD_DEMENTIA",
"FINNGEN_R6_PD_DEMENTIA_EXMORE",
"FINNGEN_R6_G6_PARKINSON",
"FINNGEN_R6_G6_PARKINSON_EXMORE",
"FINNGEN_R6_G6_PARKINSON_INCLAVO",
"FINNGEN_R6_G6_PARKSCND",
"NEALE2_20002_1262",
"NEALE2_20107_11",
"NEALE2_20110_11",
"NEALE2_20111_11",
"GCST90000014",
"GCST90000015",
"SAIGE_332")
table(lll%in%names(grps))
si=fread("study_index.csv",data.table=F)
si=fread("C://Projects/Sanger_OT_MVA/03_mva_draft/study_index.csv",data.table=F)
library(data.table)
si=fread("C://Projects/Sanger_OT_MVA/03_mva_draft/study_index.csv",data.table=F)
index=paste(si$trait_reported,si$n_initial,si$num_assoc_loci,sep = "_")
table(duplicated(index))
ind=which(duplicated(index) & si[,"num_assoc_loci"]>0)
dups=unique(index[ind])
y=si[index%in%dups,]
si_s=si[si$has_sumstats==TRUE,]
ind=grep(si_s$trait_reported,pattern = "Parkinson")
ind1=grep(si_s$trait_reported,pattern = "parkinson")
ind=unique(c(ind,ind1))
y=si_s[ind,]
View(y)
si=fread("C://Projects/Sanger_OT_MVA/03_mva_draft/study_index.csv",data.table=F)
si_s=si[si$has_sumstats==TRUE,]
si=fread("C://Projects/Sanger_OT_MVA/03_mva_draft/study_index.csv",data.table=F)
library(data.table)
si=fread("C://Projects/Sanger_OT_MVA/03_mva_draft/study_index.csv",data.table=F)
si_s=si[si$has_sumstats==TRUE,]
library(data.table)
si=fread("C://Projects/Sanger_OT_MVA/03_mva_draft/study_index.csv",data.table=F)
si=fread("C://Projects/Sanger_OT_MVA/03_mva_draft/study_index.csv",data.table=F)
index=paste(si$trait_reported,si$n_initial,si$num_assoc_loci,sep = "_")
table(duplicated(index))
ind=which(duplicated(index) & si[,"num_assoc_loci"]>0)
dups=unique(index[ind])
y=si[index%in%dups,]
si_s=si[si$has_sumstats==TRUE,]
ind=grep(si_s$trait_reported,pattern = "Parkinson")
ind1=grep(si_s$trait_reported,pattern = "parkinson")
ind=unique(c(ind,ind1))
y=si_s[ind,]
View(y)
gwas=seq(1000,100000,by=100)
tt=exp(-gwas)
plot(gwas,tt)
tt=exp(-log(gwas))
plot(gwas,tt)
plot(gwas,-tt)
tt=1/(1+exp(log(gwas)))
plot(gwas,-tt)
tt=1/(1+exp(log(gwas)))
plot(gwas,-tt)
tt=1/(1+exp(gwas))
plot(gwas,-tt)
tt=1/(1+gwas)
plot(gwas,-tt)
tt=1/(1+log(gwas))
tt=1/(1+log(gwas))
plot(log(gwas),-tt)
plot(log(gwas),tt)
plot(log(gwas),-tt)
tt=exp(-gwas)
plot(log(gwas),-tt)
tt=exp(-gwas/1000)
plot(log(gwas),-tt)
tt=exp(-gwas/100)
plot(log(gwas),-tt)
tt=exp(-gwas/10000)
plot(log(gwas),-tt)
tt=exp(-gwas/5000)
plot(log(gwas),-tt)
tt=exp(-gwas/3000)
plot(log(gwas),-tt)
tt=exp(-gwas/2000)
plot(log(gwas),-tt)
plot(log(gwas),-tt,type="l")
plot(log(gwas),1-tt,type="l",main="Amount of ")
plot(log(gwas),(1-tt)*100,type="l",main="Amount of ")
plot(log(gwas),(1-tt)*10000,type="l",main="Amount of ")
plot(log(gwas),(1-tt)*100,type="l",main="Amount of ")
gwas=seq(1000,100000,by=100)
tt=exp(-gwas/2000)
plot(log10(gwas),(1-tt)*100,type="l",main="Amount of unqiue loci with the ")
plot(log10(gwas),(1-tt)*100,type="l",main="Amount of unqiue loci with the growing number of GWAS")
plot(log10(gwas),(1-tt)*100,type="l",main="Amount of unique loci with the growing number of GWAS")
plot(log10(gwas),(1-tt)*100,type="l",main="Amount of unique loci with the growing number of GWAS")
plot(log10(gwas),(1-tt)*100,type="l",main="Amount of unique loci with the growing number of GWAS",
xlab="log10(Number of GWAS)")
plot(log10(gwas),(1-tt)*100,type="l",main="Amount of unique loci with the growing number of GWAS",
xlab="log10(Number of GWAS)", ylab="Amount of unique loic, %")
plot(log10(gwas),(1-tt)*100,type="l",main="Amount of unique loci with the growing number of GWAS",
xlab="log10(Number of GWAS)", ylab="Amount of unique loci, %")
library(coloc)
install.packages("coloc")
library(coloc)
data(coloc_test_data)
attach(coloc_test_data)
library(CARMA)
install.packages("CARMA")
devtools::install_github("ZikunY/CARMA")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("ZikunY/CARMA")
devtools::install_github("ZikunY/CARMA")
source("C:/Projects/Sanger_OT_susie_coloc/02_CARMA_test/")
source("C:/Projects/Sanger_OT_susie_coloc/02_CARMA_test/CARMA_orig.R")
library(coloc)
data(coloc_test_data)
attach(coloc_test_data)
z.list<-list()
ld.list<-list()
lambda.list<-list()
z=D3$beta/sqrt(D3$varbeta)
z.list[[1]]<-z
ld.list[[1]]<-D3$LD
lambda.list[[1]]<-1
CARMA.results<-CARMA_fixed_sigma(z.list,ld.list,lambda.list=lambda.list,
outlier.switch=T)
CARMA.results<-CARMA(z.list,ld.list,lambda.list=lambda.list,
outlier.switch=T)
source("C:/Projects/Sanger_OT_susie_coloc/02_CARMA_test/CARMA_orig_Rcpp.R")
library(coloc)
data(coloc_test_data)
attach(coloc_test_data)
z.list<-list()
ld.list<-list()
lambda.list<-list()
z=D3$beta/sqrt(D3$varbeta)
z.list[[1]]<-z
ld.list[[1]]<-D3$LD
lambda.list[[1]]<-1
CARMA.results<-CARMA(z.list,ld.list,lambda.list=lambda.list,
outlier.switch=T)
library(Matrix)
CARMA.results<-CARMA(z.list,ld.list,lambda.list=lambda.list,
outlier.switch=T)
CARMA.results<-CARMA(z.list,ld.list,lambda.list=lambda.list,
outlier.switch=T)
1
2
ind=sample(1:500,20)
ind=sample(1:500,20)
z.list[[1]]<-z[ind]
ld.list[[1]]<-D3$LD[ind,ind]
w.list=NULL
output.labels='.'
label.list=NULL
effect.size.prior='Spike-slab'
rho.index=0.99
BF.index=10
EM.dist='Logistic'
Max.Model.Dim=2e+5
all.iter=3
all.inner.iter=10
input.alpha=0
epsilon.threshold=1e-5
printing.log=F
num.causal=10
y.var=1
tau=0.04
outlier.switch=T
outlier.BF.index=1/3.2
prior.prob.computation='Logistic'
Sys.setenv("PKG_CXXFLAGS"="-std=c++11")
log.2pi<-log(2*pi)
log.2pi
log.2pi<-log(2*pi)
L<-length(z.list)
p.list<-list()
for(i in 1:L){
z.list[[i]]<-as.matrix(z.list[[i]])
p.list[[i]]<-nrow(z.list[[i]])
}
B<-Max.Model.Dim
B
all.B.list<-list()
for(i in 1:L){
all.B.list[[i]]<-list()
all.B.list[[i]][[1]]<-integer(0)
all.B.list[[i]][[2]]<-Matrix(nrow = 0,ncol=p.list[[i]],data=0,sparse = T)
}
q.list<-list()
if(!is.null(w.list)){
for(i in 1:L){
q.list[[i]]<-ncol(w.list[[i]])
invariant.var.index<-which((apply(w.list[[i]][,-1],2,sd))==0)
if(length(invariant.var.index)!=0){
invariant.var<-w.list[[i]][,invariant.var.index+1]
w.list[[i]]<-as.matrix(cbind(1,scale(w.list[[i]][,-1])))
w.list[[i]][,invariant.var.index+1]<-invariant.var
}else{
w.list[[i]]<-as.matrix(cbind(1,scale(w.list[[i]][,-1])))
}
}
}
if(is.null(label.list)){
for(i in 1:L){
label.list[[i]]=paste0('locus_',i)
}
}
Sigma.list<-list()
for(i in 1:L){
Sigma.list[[i]]<-as.matrix(ld.list[[i]])
}
S.list<-list()
for(i in 1:L){
S.list[[i]]<-integer(0)
}
all.C.list<-list()
for(i in 1:L){
all.C.list[[i]]<-list()
all.C.list[[i]][[1]]<-integer(0)
all.C.list[[i]][[2]]<-Matrix(nrow = 0,ncol=p.list[[i]],data=0,sparse = T)
}
all.epsilon.threshold<-0
epsilon.list<-list()
for(i in 1:L){
epsilon.list[[i]]<-epsilon.threshold*p.list[[i]]
all.epsilon.threshold<-all.epsilon.threshold+  epsilon.threshold*p.list[[i]]
}
model.prior='Poisson'
standardize.model.space=T
View(q.list)
View(epsilon.list)
######## Burning step###########
previous.result<-list()
z
ld.matrix
all.inner.iter
inner.all.iter
i=1
z=z
ld.matrix=ld.list[[1]]
epsilon=epsilon.list[[i]]
Max.Model.Dim=Max.Model.Dim
lambda = lambda.list[[i]],
lambda = lambda.list[[i]]
###The function that defines neighborhood model space
set.gamma.func<-function(input.S,condition.index=NULL){
set.gamma.func.base<-function(S){
add.function<-function(y){results<-(apply(as.matrix(S_sub),1,function(x){return(sort(c(x,y)))}))
return(t(results))
}
set.gamma<-list()
for(i in 1:3){
set.gamma[[i]]<-c()
}
#set of gamma-
if(length(S)==0){
S_sub<-(1:p)
set.gamma[[1]]<-c()
set.gamma[[2]]<-apply(as.matrix(S_sub),1,function(x){return(c(x,S))})
set.gamma[[2]]<-as.matrix(set.gamma[[2]])
set.gamma[[3]]<-c()
}
if(length(S)>1){
S_sub<-(1:p)[-S]
set.gamma[[1]]<-t(combn(S,length(S)-1))
if(length(S)>2){
set.gamma[[1]]<-t(apply(as.matrix(set.gamma[[1]]),1,sort))
}
#set of gamma+
set.gamma[[2]]<-apply(as.matrix(S_sub),1,function(x){return(sort(c(x,S)))})
set.gamma[[2]]<-t(set.gamma[[2]])
#set of gamma=
set.gamma[[3]]<-add.function(set.gamma[[1]][1,])
for(i in 2:nrow(set.gamma[[1]])){
set.gamma[[3]]<-rbind(set.gamma[[3]],add.function(set.gamma[[1]][i,]))
}
}
if(length(S)==1){
S_sub<-(1:p)[-S]
set.gamma[[1]]<-t(combn(S,length(S)-1))
set.gamma[[2]]<-apply(as.matrix(S_sub),1,function(x){return(sort(c(x,S)))})
set.gamma[[2]]<-t(set.gamma[[2]])
set.gamma[[3]]<-t(add.function(set.gamma[[1]][1,]))
}
return(set.gamma)
}
set.gamma.func.conditional<-function(input.S,condition.index){
add.function<-function(y){results<-(apply(as.matrix(S_sub),1,function(x){return(sort(c(x,y)))}))
return(t(results))
}
set.gamma<-list()
for(i in 1:3){
set.gamma[[i]]<-c()
}
S=input.S[-match(condition.index,input.S)]
#set of gamma-
if(length(S)==0){
S=integer(0)
S_sub<-(1:p)[-condition.index]
set.gamma[[1]]<-c()
set.gamma[[2]]<-apply(as.matrix(S_sub),1,function(x){return(c(x,S))})
set.gamma[[2]]<-as.matrix(set.gamma[[2]])
set.gamma[[3]]<-c()
}
if(length(S)==1){
S_sub<-(1:p)[-input.S]
set.gamma[[1]]<-t(combn(S,length(S)-1))
set.gamma[[2]]<-apply(as.matrix(S_sub),1,function(x){return(sort(c(x,S)))})
set.gamma[[2]]<-as.matrix((t(set.gamma[[2]])))
set.gamma[[3]]<-t(add.function(set.gamma[[1]][1,]))
}
if(length(S)>1){
S_sub<-(1:p)[-input.S]
if(length(S)>2){
set.gamma[[1]]<-t(combn(S,length(S)-1))
set.gamma[[1]]<-t(apply(as.matrix(set.gamma[[1]]),1,sort))
}else{
set.gamma[[1]]<-t(combn(S,length(S)-1))
}
set.gamma[[2]]<-apply(as.matrix(S_sub),1,function(x){return(sort(c(x,S)))})
set.gamma[[2]]<-as.matrix(t(set.gamma[[2]]))
set.gamma[[3]]<-add.function(set.gamma[[1]][1,])
factorial(3)
for(i in 2:nrow(set.gamma[[1]])){
set.gamma[[3]]<-rbind(set.gamma[[3]],add.function(set.gamma[[1]][i,]))
}
}
return(set.gamma)
}
if(is.null(condition.index)){
results<-set.gamma.func.base(input.S)
}else{
results<-set.gamma.func.conditional(input.S,condition.index)
}
return(results)
}
l=1
h=1
set.gamma<-set.gamma.func(S,conditional.S)
conditional.S
S
model.prior
effect.size.prior
#######The prior distributions on the model space#########
prob.list<-list()
p<-nrow(z);
if(model.prior=='Poisson'){
Poisson.prior.dist<-function(t){
dim.model<-sum(t)
result<-dim.model*log(lambda)+lfactorial(p-dim.model)-lfactorial(p)
return(result)
}
prior.dist<-Poisson.prior.dist
}
Poisson.prior.dist
prior.dis
prior.disе
prior.dist
prior.dist
if(effect.size.prior=='Spike-slab'){
marginal_likelihood=ind_Normal_fixed_sigma_marginal
tau.sample<-tau
if(outlier.switch){
outlier_likelihood=outlier_ind_Normal_marginal
outlier.tau=tau.sample
}
}
p<-nrow(z);
log.2pi<-log(2*pi)
B<-Max.Model.Dim
stored.result.prob<-rep(0,p)
stored.bf<-0
Sigma<-as.matrix(ld.matrix)
input.S
if(!is.null(input.S)){
S<-input.S
}else{
S<-integer(0)
}
library(CARMA)
library(data.table)
library(magrittr)
library(dplyr)
library(devtools)
library(R.utils)
library(RcppArmadillo)
library(RcppGSL)
library(glmnet)
setwd('~/Desktop')
setwd("~/Projects/Sanger_OT_susie_coloc/02_CARMA_test/")
load("APOE_CAMRA_data.RData")
setwd("C://Projects/Sanger_OT_susie_coloc/02_CARMA_test/")
load("APOE_CAMRA_data.RData")
ind=sample(1:481,481)
ind=1:nrow(sumstat)
z.list<-list()
ld.list<-list()
lambda.list<-list()
z.list[[1]]<-sumstat$Z[ind]/3
ld.list[[1]]<-as.matrix(ld)[ind,ind]
lambda.list[[1]]<-1
library("CARMA")
library(Matrix)
source("CARMA_fixed_sigma.R")
source("priors.R")
CARMA.results<-CARMA_fixed_sigma(z.list,ld.list,lambda.list=lambda.list,
outlier.switch=T)
library("CARMA")
