2c2
< #'
---
> #' 
4c4
< #' for the SNPs at the testing loci, the corresponding LD matrices for fine-mapping, and an estimated trait variance. Functional annotations can be included as prior
---
> #' for the SNPs at the testing loci, the corresponding LD matrices for fine-mapping, and an estimated trait variance. Functional annotations can be included as prior 
6c6
< #' between summary statistics and LD matrix extracted from a reference panel. The model can be executed chromosome-wise to increase power.
---
> #' between summary statistics and LD matrix extracted from a reference panel. The model can be executed chromosome-wise to increase power. 
11c11
< #'@param label.list Input list of the names at the testing loci. Default is NULL.
---
> #'@param label.list Input list of the names at the testing loci. Default is NULL. 
14c14
< #'@param y.var The input variance of the summary statistics, the default value is 1 as the summary statistics are standardized.
---
> #'@param y.var The input variance of the summary statistics, the default value is 1 as the summary statistics are standardized. 
17c17
< #'@param outlier.switch The indicator variable for outlier detection. We suggest that the detection should always be turned on if using external LD matrix.
---
> #'@param outlier.switch The indicator variable for outlier detection. We suggest that the detection should always be turned on if using external LD matrix. 
20c20
< #'@param Max.Model.Dim Maximum number of the top candidate models based on the unnormalized posterior probability.
---
> #'@param Max.Model.Dim Maximum number of the top candidate models based on the unnormalized posterior probability. 
25c25
< #'@param EM.dist The distribution used to model the prior probability of being causal as a function of functional annotations. The default distribution is logistic distribution.
---
> #'@param EM.dist The distribution used to model the prior probability of being causal as a function of functional annotations. The default distribution is logistic distribution. 
33,35c33,35
< #'@details The function performs a Bayesian fine-mapping method.
< #'@examples
< #'# Example
---
> #'@details The function performs a Bayesian fine-mapping method. 
> #'@examples 
> #'# Example 
53,56c53,56
< CARMA<-function(z.list,ld.list,w.list=NULL,lambda.list=NULL,output.labels='.',label.list=NULL,
<                 effect.size.prior='Spike-slab',rho.index=0.99,BF.index=10,EM.dist='Logistic',
<                 Max.Model.Dim=2e+5,all.iter=2,all.inner.iter=10,input.alpha=0,epsilon.threshold=1e-5,
<                 num.causal=10,y.var=1,tau=0.04,outlier.switch=T,outlier.BF.index=1/3.2,prior.prob.computation='Logistic'){
---
> CARMA_fixed_sigma<-function(z.list,ld.list,w.list=NULL,lambda.list=NULL,output.labels='.',label.list=NULL,
>                             effect.size.prior='Spike-slab',rho.index=0.99,BF.index=10,EM.dist='Logistic',
>                             Max.Model.Dim=2e+5,all.iter=3,all.inner.iter=10,input.alpha=0,epsilon.threshold=1e-5,
>                             num.causal=10,y.var=1,tau=0.04,outlier.switch=T,outlier.BF.index=1/3.2,prior.prob.computation='Logistic'){
243c243
<         nega.log.pro<-log(1-prior.prob)
---
>         nega.log.pro<-log(1-prior.prob) 
376c376
<             set.gamma[[3]]<-rbind(set.gamma[[3]],add.function(set.gamma[[1]][i,]))
---
>             set.gamma[[3]]<-rbind(set.gamma[[3]],add.function(set.gamma[[1]][i,]))  
428c428
<             set.gamma[[3]]<-rbind(set.gamma[[3]],add.function(set.gamma[[1]][i,]))
---
>             set.gamma[[3]]<-rbind(set.gamma[[3]],add.function(set.gamma[[1]][i,]))  
503c503
<           result<-c(is_empty1,result)
---
>           result<-c(is_empty1,result)  
507c507
<           result<-c(NA,result)
---
>           result<-c(NA,result)  
566,567c566,567
<         {
<           set.gamma<-set.gamma.func(S,conditional.S)
---
>         { 
>           set.gamma<-set.gamma.func(S,conditional.S)  
779c779
<                     modi.ld.S<-opizer$maximum*modi.ld.S+(1-opizer$maximum)*diag(nrow(modi.ld.S))
---
>                     modi.ld.S<-opizer$maximum*modi.ld.S+(1-opizer$maximum)*diag(nrow(modi.ld.S)) 
926,927c926,927
<   ########Running CARMA########
<   for(g in 1:all.iter){
---
>   ########Running CARMA######## 
>   for(g in 1:all.iter){ 
1021c1021
<         model.prior='input.prob'
---
>         model.prior='input.prob'  
